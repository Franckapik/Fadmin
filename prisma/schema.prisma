generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model author {
  author_id        Int        @id @default(autoincrement()) @db.SmallInt
  author_name      String     @db.VarChar(20)
  author_art       String?    @db.VarChar(20)
  author_biography String?
  author_draft     Boolean
  author_email     String?    @db.VarChar(20)
  category         category[]
  media            media[]
}

model category {
  category_id          Int     @id @default(autoincrement())
  category_name        String  @db.VarChar(50)
  category_description String?
  category_draft       Boolean
  category_author      Int?    @db.SmallInt
  author               author? @relation(fields: [category_author], references: [author_id], onDelete: NoAction, onUpdate: NoAction, map: "category_author_fkey")
  media                media[]
}

model media {
  media_id          Int       @id @default(autoincrement())
  media_title       String?   @db.VarChar(80)
  media_photo       String?   @db.VarChar(100)
  media_video       String?   @db.VarChar(100)
  media_content     String?
  media_link        String?   @db.VarChar(100)
  media_share       String?   @db.VarChar(100)
  media_created     DateTime? @db.Date
  media_number      Int?      @db.SmallInt
  media_category_id Int?
  media_folder      String?   @db.VarChar(30)
  media_subtitle    String    @db.VarChar(50)
  media_author_id   Int?      @db.SmallInt
  media_home        Boolean?
  media_draft       Boolean?
  media_large       Boolean?
  media_position    Int?      @db.SmallInt
  author            author?   @relation(fields: [media_author_id], references: [author_id], onDelete: NoAction, onUpdate: NoAction, map: "author_id_fkey")
  category          category? @relation(fields: [media_category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "category_fkey")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerAccountId  String
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  providerId         String
  providerType       String
  refreshToken       String?
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
