generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model author {
  author_id           Int        @id @default(autoincrement()) @db.SmallInt
  author_name         String     @db.VarChar(20)
  author_art          String?    @db.VarChar(20)
  author_biography_fr String?
  author_draft        Boolean
  author_email        String?    @db.VarChar(70)
  author_fb           String?    @db.VarChar(100)
  author_insta        String?    @db.VarChar(100)
  author_biography_en String?
  category            category[]
  comment             comment[]
  media               media[]
  post                post[]
}

model category {
  category_id          Int     @id @default(autoincrement())
  category_name        String  @db.VarChar(50)
  category_description String?
  category_draft       Boolean
  category_author      Int?    @db.SmallInt
  author               author? @relation(fields: [category_author], references: [author_id], onDelete: NoAction, onUpdate: NoAction, map: "category_author_fkey")
  media                media[]
}

model media {
  media_id          Int       @id @default(autoincrement())
  media_title       String?   @db.VarChar(80)
  media_photo       String?   @db.VarChar(100)
  media_video       String?   @db.VarChar(100)
  media_content     String?
  media_link        String?   @db.VarChar(100)
  media_share       String?   @db.VarChar(100)
  media_created     DateTime? @db.Timestamp(6)
  media_number      Int?      @db.SmallInt
  media_category_id Int?
  media_folder      String?   @db.VarChar(30)
  media_subtitle    String    @db.VarChar(50)
  media_author_id   Int?      @db.SmallInt
  media_home        Boolean
  media_draft       Boolean
  media_large       Boolean
  media_position    Int?      @db.SmallInt
  media_preview     Boolean?
  media_path        String?   @db.VarChar(200)
  author            author?   @relation(fields: [media_author_id], references: [author_id], onDelete: NoAction, onUpdate: NoAction, map: "author_id_fkey")
  category          category? @relation(fields: [media_category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "category_fkey")
}

model post {
  post_id        Int       @id @default(autoincrement())
  post_title     String    @db.VarChar(200)
  post_draft     Boolean?
  post_author_id Int?
  post_content   Json?     @db.Json
  post_html      String?
  post_create    DateTime? @db.Date
  post_update    DateTime? @db.Date
  post_image     String?   @db.VarChar(400)
  author         author?   @relation(fields: [post_author_id], references: [author_id], onDelete: NoAction, onUpdate: NoAction, map: "post_author_id_fk")
}

model comment {
  comment_id        Int       @id @default(autoincrement())
  comment_msg       String?   @db.VarChar(1000)
  comment_create    DateTime? @db.Date
  comment_author    String?   @db.VarChar(100)
  comment_draft     Boolean?
  comment_author_id Int?
  author            author?   @relation(fields: [comment_author_id], references: [author_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_author_id_fk")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
