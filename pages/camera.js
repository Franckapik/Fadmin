/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useRef, useEffect, useState } from "react";
import {
  useGLTF,
  PerspectiveCamera,
  useAnimations,
  useScroll,
} from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

export default function Camera(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/camera.glb");
  const { actions } = useAnimations(animations, group);
  useEffect(() => {
    console.log(actions);
    /* actions.dolly.play(); */
  });
  const scroll = useScroll();
  const cam = useRef();
  const [posCam, setPosCam] = useState([0, 0, 0]);

  /*  useFrame((state) => {
    actions.dolly.time = THREE.MathUtils.lerp(
      actions.dolly.time,
      actions.dolly.getClip().duration * scroll.scroll.current,
      0.05
    );
  }); */

  useFrame((state) => {
    const vec = new THREE.Vector3().fromArray(posCam);
    /*     console.log(cam.current.position);
     */
    cam.current.position.lerp(vec, 0.05);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="BezierCurve" position={[-4.65, 1.45, 2.79]} />
        <group
          name="Empty"
          position={[-0.69, 1.59, 21.36]}
          rotation={[0, -0.01, 0]}
        >
          <group
            name="Camera001_1"
            rotation={[1.56, 0, -0.02]}
            scale={[1.17, 1.17, 1.17]}
          >
            <PerspectiveCamera
              ref={cam}
              name="Camera001_Orientation"
              makeDefault={true}
              far={1000}
              near={0.1}
              fov={40.01}
              position={[20000, 20, 20]}
              rotation={[-Math.PI / 2, 0, 0]}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/camera.glb");
